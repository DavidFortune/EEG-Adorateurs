rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Services collection - allow authenticated users to read and write
    // In production, you may want to restrict write access to admins only
    match /services/{serviceId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null;
    }
    
    // Members collection - users can read all members and update their own profile
    match /members/{memberId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null &&
        (request.auth.uid == resource.data.firebaseUserId ||
         // Allow updating teams field for team management
         (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['teams', 'updatedAt'])));
      allow delete: if false; // Never allow deletion
    }
    
    // Ministries collection - allow authenticated users to read and create
    // Allow creation during member onboarding, restrict updates to prevent abuse
    match /ministries/{ministryId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.resource.data.keys().hasAll(['name', 'isActive', 'order', 'createdAt', 'updatedAt']) &&
        request.resource.data.name is string &&
        request.resource.data.name.size() > 0 &&
        request.resource.data.isActive is bool &&
        request.resource.data.order is number;
      allow update: if false; // Prevent updates for now - can be enabled for admins later
      allow delete: if false; // Prevent deletion for now - can be enabled for admins later
    }
    
    // Teams collection - allow authenticated users to read, admins to write
    match /teams/{teamId} {
      // All authenticated users can read teams
      allow read: if request.auth != null;
      
      // Only admins can create, update, or delete teams
      // For now, we'll allow any authenticated user to manage teams
      // In production, you should check if the user is an admin
      allow create, update, delete: if request.auth != null;
    }
    
    // Availability collection - members can manage their own availability
    match /availability/{availabilityId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && 
        request.resource.data.memberId == request.auth.uid;
      allow delete: if request.auth != null && 
        resource.data.memberId == request.auth.uid;
    }
    
    // Assignments collection - only authenticated users (admins) can manage
    match /assignments/{assignmentId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null;
    }
    
    // Programs collection - allow authenticated users to manage service programs
    match /programs/{programId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }
    
    // Resources collection - everyone can read, only authenticated users can manage
    match /resources/{resourceId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null;
    }
    
    // Resource Collections collection - everyone can read, only authenticated users can manage
    match /resource_collections/{collectionId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null &&
        request.resource.data.keys().hasAll(['name', 'symbol', 'color', 'createdAt', 'updatedAt']) &&
        request.resource.data.name is string &&
        request.resource.data.name.size() > 0 &&
        request.resource.data.symbol is string &&
        request.resource.data.symbol.size() >= 2 &&
        request.resource.data.symbol.size() <= 3 &&
        request.resource.data.symbol.matches('[A-Z]+') &&
        request.resource.data.color is string &&
        request.resource.data.color.matches('^#[0-9a-fA-F]{6}$');
      allow update: if request.auth != null &&
        request.resource.data.keys().hasAll(['name', 'symbol', 'color', 'updatedAt']) &&
        request.resource.data.name is string &&
        request.resource.data.name.size() > 0 &&
        request.resource.data.symbol is string &&
        request.resource.data.symbol.size() >= 2 &&
        request.resource.data.symbol.size() <= 3 &&
        request.resource.data.symbol.matches('[A-Z]+') &&
        request.resource.data.color is string &&
        request.resource.data.color.matches('^#[0-9a-fA-F]{6}$');
      allow delete: if request.auth != null;
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}